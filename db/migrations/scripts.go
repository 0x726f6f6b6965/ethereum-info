// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_create_block.down.sql (29B)
// 000001_create_block.up.sql (431B)
// 000002_create_transaction.down.sql (35B)
// 000002_create_transaction.up.sql (559B)
// 000003_create_log.down.sql (27B)
// 000003_create_log.up.sql (400B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_blockDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x89\x4f\xca\xc9\x4f\xce\xb6\x06\x04\x00\x00\xff\xff\xac\xd0\x92\x53\x1d\x00\x00\x00")

func _000001_create_blockDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_blockDownSql,
		"000001_create_block.down.sql",
	)
}

func _000001_create_blockDownSql() (*asset, error) {
	bytes, err := _000001_create_blockDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_block.down.sql", size: 29, mode: os.FileMode(0644), modTime: time.Unix(1701314827, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xc0, 0x1f, 0x19, 0x32, 0xa1, 0x28, 0x2e, 0x9, 0x81, 0xfd, 0xca, 0xb2, 0x23, 0xb5, 0xbe, 0x36, 0xc6, 0x19, 0x2e, 0xaf, 0x9f, 0x1b, 0xb6, 0x40, 0x90, 0xe, 0x8a, 0xf9, 0x4, 0xf2, 0x9}}
	return a, nil
}

var __000001_create_blockUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\x02\x31\x18\x87\x67\xef\x53\xfc\xc6\x36\x71\xd1\xc9\xc0\x74\xca\x4b\xd2\x78\x16\x3d\xda\x04\xa6\x4b\x29\x0d\xd7\xe8\x95\x4b\x29\xfe\xf9\xf6\x46\x90\x06\x1c\x6e\x71\x69\x9a\xbc\xcf\xef\x19\x9e\x87\x9a\x4a\x45\x50\xe5\x7d\x45\x10\x53\xc8\x99\x02\x2d\xc4\x5c\xcd\x91\x9a\xd5\xdb\xd6\xbe\xb2\x02\x00\x0e\xdf\x26\xec\x3b\xac\xfc\xc6\x87\x04\x2d\xc5\x8b\xa6\x03\x2f\x75\x55\x5d\x9f\x51\xad\xd9\xb5\xb0\xad\x89\xc6\x26\x17\xf1\x6e\xe2\x97\x0f\x1b\x76\x73\x7b\xc7\x87\x66\xc9\x77\xee\x64\xbf\xb8\x5f\xf5\x26\xba\x90\x06\xbd\x97\x42\x1b\x9d\x49\xee\x68\xfc\x79\x76\xc9\x74\x7d\x66\x30\xa1\x69\xa9\x2b\x05\x16\xb6\x1f\x8c\xf3\xd1\x28\x33\xc7\xf9\xbe\x5f\xff\x67\xfe\x5c\x8b\xa7\xb2\x5e\xe2\x91\x96\x2c\x77\xe3\x05\x1f\x17\xc5\x6f\x6e\x21\x27\xb4\xf8\x93\x3b\x93\x8d\x5f\x7f\x62\x26\x4f\xfd\x71\xe6\x18\x7f\x07\x00\x00\xff\xff\xca\x9f\x81\x96\xaf\x01\x00\x00")

func _000001_create_blockUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_blockUpSql,
		"000001_create_block.up.sql",
	)
}

func _000001_create_blockUpSql() (*asset, error) {
	bytes, err := _000001_create_blockUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_block.up.sql", size: 431, mode: os.FileMode(0644), modTime: time.Unix(1701335441, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xd8, 0x7b, 0x54, 0xdc, 0x46, 0x86, 0xb, 0x8a, 0xc, 0x3b, 0x8e, 0x7c, 0x3a, 0xa3, 0xf, 0x2d, 0xc6, 0xef, 0xbe, 0x2, 0x42, 0xdb, 0xb0, 0x20, 0xa5, 0xd9, 0x7a, 0x4b, 0x24, 0x7b, 0x18}}
	return a, nil
}

var __000002_create_transactionDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x89\x2f\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\xb3\x06\x04\x00\x00\xff\xff\x99\xfa\x60\x3a\x23\x00\x00\x00")

func _000002_create_transactionDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_transactionDownSql,
		"000002_create_transaction.down.sql",
	)
}

func _000002_create_transactionDownSql() (*asset, error) {
	bytes, err := _000002_create_transactionDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_transaction.down.sql", size: 35, mode: os.FileMode(0644), modTime: time.Unix(1701314821, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x19, 0x54, 0x35, 0x5c, 0x99, 0x45, 0x1c, 0xa0, 0xef, 0xfd, 0x3c, 0x3f, 0xca, 0x25, 0xbb, 0x13, 0x56, 0x39, 0x40, 0x30, 0xe4, 0x33, 0xd1, 0xe9, 0xca, 0x97, 0xe3, 0x2a, 0x52, 0x15, 0xf6}}
	return a, nil
}

var __000002_create_transactionUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xc1\x4b\xc3\x30\x14\xc6\xef\xfd\x2b\x1e\x3b\x25\xe0\x61\xea\x45\xb6\x53\x75\x19\x14\x6b\xa7\x5d\x0b\xdb\x29\xbc\xa5\xd9\x1a\x5c\x93\x91\xbe\xce\xf9\xdf\x4b\xbb\x59\x58\x51\x10\xbc\xe4\xf2\x7e\xbf\xef\x0b\x7c\x4f\xa9\x08\x33\x01\x59\xf8\x18\x0b\x88\xe6\x90\x2c\x32\x10\xab\x68\x99\x2d\x81\x24\x79\xb4\x35\x2a\x32\xce\xb2\x00\x00\x80\x4e\xb2\xc4\xba\x04\x55\xa2\x47\x45\xda\xc3\x11\xfd\xa7\xb1\x3b\x76\x7b\xf7\xc0\x21\x4f\xa2\xb7\x5c\x74\x19\x49\x1e\xc7\x37\x9d\xb3\xd9\x3b\xf5\x2e\x6d\x53\xc1\xc6\xec\x8c\x25\xf0\x7a\xab\xbd\xb6\x4a\xd7\x40\xb2\xbb\xb2\x9e\xe1\x03\x79\xb4\xf5\xae\x1a\xfd\xd6\x37\x60\xc9\xfd\x91\xb4\xce\x2a\xfd\xfd\x9d\xeb\x53\x81\x84\xad\xda\xe6\x0c\x4e\x47\xdc\x37\xfa\x87\x82\xfb\xf1\x78\x58\xa0\xbc\x46\xd2\x92\x4c\xa5\xa1\x7d\x6a\xc2\xea\xd0\x33\x30\x13\xf3\x30\x8f\x33\x60\xd6\x7d\x30\xce\x27\x93\x9e\x39\xeb\xcd\xa1\xf8\x8f\xfe\x9a\x46\x2f\x61\xba\x86\x67\xb1\x66\x97\xc5\x78\xc0\xa7\x41\x70\x19\x3b\x4a\x66\x62\x35\x1c\xfb\xcc\x49\x53\x9c\x60\x91\x5c\x6f\x0f\x7d\xca\xf4\x2b\x00\x00\xff\xff\x0e\x00\x7c\xc5\x2f\x02\x00\x00")

func _000002_create_transactionUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_transactionUpSql,
		"000002_create_transaction.up.sql",
	)
}

func _000002_create_transactionUpSql() (*asset, error) {
	bytes, err := _000002_create_transactionUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_transaction.up.sql", size: 559, mode: os.FileMode(0644), modTime: time.Unix(1701335446, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x94, 0x18, 0xe7, 0x4f, 0x4c, 0xab, 0x58, 0x83, 0x1f, 0xb9, 0x3c, 0x22, 0x97, 0xf0, 0x3f, 0x41, 0x70, 0xb6, 0x5f, 0x99, 0x2b, 0x91, 0xca, 0x97, 0x4b, 0x9e, 0xc1, 0xff, 0xf6, 0xca, 0xe7}}
	return a, nil
}

var __000003_create_logDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x89\xcf\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x94\x84\x7b\xdd\x1b\x00\x00\x00")

func _000003_create_logDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_create_logDownSql,
		"000003_create_log.down.sql",
	)
}

func _000003_create_logDownSql() (*asset, error) {
	bytes, err := _000003_create_logDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_create_log.down.sql", size: 27, mode: os.FileMode(0644), modTime: time.Unix(1701314817, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x3f, 0x5d, 0x3f, 0xd2, 0xa9, 0x8b, 0xfb, 0x60, 0xd2, 0x2, 0x97, 0x23, 0x7d, 0x19, 0x49, 0xe2, 0x31, 0x55, 0xcf, 0x7a, 0x6e, 0x26, 0x20, 0x51, 0x30, 0xe2, 0xbb, 0xb, 0xfd, 0x1f, 0x26}}
	return a, nil
}

var __000003_create_logUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x31\x6f\x83\x30\x10\x85\x77\x7e\xc5\x1b\xb1\x94\xa5\x9d\xaa\x64\xa2\xc9\x21\xa1\x52\x52\x11\x47\x4a\x26\xeb\x0a\x16\x58\x6a\x4c\x64\xae\x2d\xfd\xf7\x15\x90\x66\x60\xed\xe2\xe5\xde\xf7\x59\xef\x6d\x4b\x4a\x34\x41\x27\xcf\x39\x21\x4b\x51\xec\x35\xe8\x94\x1d\xf4\x01\x62\x3e\xba\x26\x8e\x00\x40\x06\xd3\x72\xdf\xa2\x6a\x39\x70\x25\x36\xe0\x8b\xc3\x8f\xf3\x4d\xfc\xf0\xf8\xa4\x50\x52\x4a\x25\x15\x5b\x1a\x21\x09\xec\x7b\xae\xc4\x75\x3e\xbe\x71\x6a\xd2\x16\xc7\x3c\x5f\x4d\x3a\xe7\x6b\x3b\xe0\xdd\x35\xce\xcb\xe2\x54\xb3\xf0\x28\x1f\x7f\x5a\x9c\xaa\x60\x59\xac\x11\x77\xb1\x18\x9f\x5e\xf8\x72\xbd\x67\xb0\xa3\x34\x39\xe6\x1a\xb1\xef\xbe\x63\xa5\xd6\xeb\x7b\x66\xc6\x3f\xaf\xf5\x7f\xf0\xb7\x32\x7b\x4d\xca\x33\x5e\xe8\xfc\x57\x6b\x35\x17\x51\x91\xda\x44\xd1\x6d\xc8\xac\xd8\xd1\x69\x39\xe4\x1c\x37\x53\xda\xb8\x7a\xc0\xbe\x98\xd7\xc5\x52\xb5\xf9\x0d\x00\x00\xff\xff\x8a\x70\x02\xdd\x90\x01\x00\x00")

func _000003_create_logUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_create_logUpSql,
		"000003_create_log.up.sql",
	)
}

func _000003_create_logUpSql() (*asset, error) {
	bytes, err := _000003_create_logUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_create_log.up.sql", size: 400, mode: os.FileMode(0644), modTime: time.Unix(1701335473, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xbc, 0x57, 0xcc, 0x66, 0x9b, 0x6d, 0xc, 0xc, 0x93, 0x8, 0xf3, 0xb1, 0x45, 0x22, 0x62, 0xa5, 0xbf, 0xb9, 0xfa, 0x68, 0x67, 0x32, 0xb0, 0xd3, 0x6a, 0x85, 0xfd, 0x9, 0xb4, 0x15, 0x95}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_block.down.sql":       _000001_create_blockDownSql,
	"000001_create_block.up.sql":         _000001_create_blockUpSql,
	"000002_create_transaction.down.sql": _000002_create_transactionDownSql,
	"000002_create_transaction.up.sql":   _000002_create_transactionUpSql,
	"000003_create_log.down.sql":         _000003_create_logDownSql,
	"000003_create_log.up.sql":           _000003_create_logUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_block.down.sql":       {_000001_create_blockDownSql, map[string]*bintree{}},
	"000001_create_block.up.sql":         {_000001_create_blockUpSql, map[string]*bintree{}},
	"000002_create_transaction.down.sql": {_000002_create_transactionDownSql, map[string]*bintree{}},
	"000002_create_transaction.up.sql":   {_000002_create_transactionUpSql, map[string]*bintree{}},
	"000003_create_log.down.sql":         {_000003_create_logDownSql, map[string]*bintree{}},
	"000003_create_log.up.sql":           {_000003_create_logUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
