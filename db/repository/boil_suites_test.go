// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("TBlocks", testTBlocks)
	t.Run("TLogs", testTLogs)
	t.Run("TTransactions", testTTransactions)
}

func TestDelete(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("TBlocks", testTBlocksDelete)
	t.Run("TLogs", testTLogsDelete)
	t.Run("TTransactions", testTTransactionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("TBlocks", testTBlocksQueryDeleteAll)
	t.Run("TLogs", testTLogsQueryDeleteAll)
	t.Run("TTransactions", testTTransactionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("TBlocks", testTBlocksSliceDeleteAll)
	t.Run("TLogs", testTLogsSliceDeleteAll)
	t.Run("TTransactions", testTTransactionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("TBlocks", testTBlocksExists)
	t.Run("TLogs", testTLogsExists)
	t.Run("TTransactions", testTTransactionsExists)
}

func TestFind(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("TBlocks", testTBlocksFind)
	t.Run("TLogs", testTLogsFind)
	t.Run("TTransactions", testTTransactionsFind)
}

func TestBind(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("TBlocks", testTBlocksBind)
	t.Run("TLogs", testTLogsBind)
	t.Run("TTransactions", testTTransactionsBind)
}

func TestOne(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("TBlocks", testTBlocksOne)
	t.Run("TLogs", testTLogsOne)
	t.Run("TTransactions", testTTransactionsOne)
}

func TestAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("TBlocks", testTBlocksAll)
	t.Run("TLogs", testTLogsAll)
	t.Run("TTransactions", testTTransactionsAll)
}

func TestCount(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("TBlocks", testTBlocksCount)
	t.Run("TLogs", testTLogsCount)
	t.Run("TTransactions", testTTransactionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("TBlocks", testTBlocksHooks)
	t.Run("TLogs", testTLogsHooks)
	t.Run("TTransactions", testTTransactionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("TBlocks", testTBlocksInsert)
	t.Run("TBlocks", testTBlocksInsertWhitelist)
	t.Run("TLogs", testTLogsInsert)
	t.Run("TLogs", testTLogsInsertWhitelist)
	t.Run("TTransactions", testTTransactionsInsert)
	t.Run("TTransactions", testTTransactionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TLogToTTransactionUsingTXHashTTransaction", testTLogToOneTTransactionUsingTXHashTTransaction)
	t.Run("TTransactionToTBlockUsingBlockNumTBlock", testTTransactionToOneTBlockUsingBlockNumTBlock)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("TBlockToBlockNumTTransactions", testTBlockToManyBlockNumTTransactions)
	t.Run("TTransactionToTXHashTLogs", testTTransactionToManyTXHashTLogs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TLogToTTransactionUsingTXHashTLogs", testTLogToOneSetOpTTransactionUsingTXHashTTransaction)
	t.Run("TTransactionToTBlockUsingBlockNumTTransactions", testTTransactionToOneSetOpTBlockUsingBlockNumTBlock)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("TBlockToBlockNumTTransactions", testTBlockToManyAddOpBlockNumTTransactions)
	t.Run("TTransactionToTXHashTLogs", testTTransactionToManyAddOpTXHashTLogs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("TBlocks", testTBlocksReload)
	t.Run("TLogs", testTLogsReload)
	t.Run("TTransactions", testTTransactionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("TBlocks", testTBlocksReloadAll)
	t.Run("TLogs", testTLogsReloadAll)
	t.Run("TTransactions", testTTransactionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("TBlocks", testTBlocksSelect)
	t.Run("TLogs", testTLogsSelect)
	t.Run("TTransactions", testTTransactionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("TBlocks", testTBlocksUpdate)
	t.Run("TLogs", testTLogsUpdate)
	t.Run("TTransactions", testTTransactionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("TBlocks", testTBlocksSliceUpdateAll)
	t.Run("TLogs", testTLogsSliceUpdateAll)
	t.Run("TTransactions", testTTransactionsSliceUpdateAll)
}
