// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TBlock is an object representing the database table.
type TBlock struct {
	BlockNum   int64     `boil:"block_num" json:"block_num" toml:"block_num" yaml:"block_num"`
	BlockHash  string    `boil:"block_hash" json:"block_hash" toml:"block_hash" yaml:"block_hash"`
	BlockTime  int64     `boil:"block_time" json:"block_time" toml:"block_time" yaml:"block_time"`
	ParentHash string    `boil:"parent_hash" json:"parent_hash" toml:"parent_hash" yaml:"parent_hash"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *tBlockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tBlockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TBlockColumns = struct {
	BlockNum   string
	BlockHash  string
	BlockTime  string
	ParentHash string
	CreateTime string
	UpdateTime string
}{
	BlockNum:   "block_num",
	BlockHash:  "block_hash",
	BlockTime:  "block_time",
	ParentHash: "parent_hash",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

var TBlockTableColumns = struct {
	BlockNum   string
	BlockHash  string
	BlockTime  string
	ParentHash string
	CreateTime string
	UpdateTime string
}{
	BlockNum:   "t_block.block_num",
	BlockHash:  "t_block.block_hash",
	BlockTime:  "t_block.block_time",
	ParentHash: "t_block.parent_hash",
	CreateTime: "t_block.create_time",
	UpdateTime: "t_block.update_time",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TBlockWhere = struct {
	BlockNum   whereHelperint64
	BlockHash  whereHelperstring
	BlockTime  whereHelperint64
	ParentHash whereHelperstring
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpertime_Time
}{
	BlockNum:   whereHelperint64{field: "\"t_block\".\"block_num\""},
	BlockHash:  whereHelperstring{field: "\"t_block\".\"block_hash\""},
	BlockTime:  whereHelperint64{field: "\"t_block\".\"block_time\""},
	ParentHash: whereHelperstring{field: "\"t_block\".\"parent_hash\""},
	CreateTime: whereHelpertime_Time{field: "\"t_block\".\"create_time\""},
	UpdateTime: whereHelpertime_Time{field: "\"t_block\".\"update_time\""},
}

// TBlockRels is where relationship names are stored.
var TBlockRels = struct {
	BlockNumTTransactions string
}{
	BlockNumTTransactions: "BlockNumTTransactions",
}

// tBlockR is where relationships are stored.
type tBlockR struct {
	BlockNumTTransactions TTransactionSlice `boil:"BlockNumTTransactions" json:"BlockNumTTransactions" toml:"BlockNumTTransactions" yaml:"BlockNumTTransactions"`
}

// NewStruct creates a new relationship struct
func (*tBlockR) NewStruct() *tBlockR {
	return &tBlockR{}
}

func (r *tBlockR) GetBlockNumTTransactions() TTransactionSlice {
	if r == nil {
		return nil
	}
	return r.BlockNumTTransactions
}

// tBlockL is where Load methods for each relationship are stored.
type tBlockL struct{}

var (
	tBlockAllColumns            = []string{"block_num", "block_hash", "block_time", "parent_hash", "create_time", "update_time"}
	tBlockColumnsWithoutDefault = []string{"block_num", "block_hash", "block_time", "parent_hash"}
	tBlockColumnsWithDefault    = []string{"create_time", "update_time"}
	tBlockPrimaryKeyColumns     = []string{"block_num"}
	tBlockGeneratedColumns      = []string{}
)

type (
	// TBlockSlice is an alias for a slice of pointers to TBlock.
	// This should almost always be used instead of []TBlock.
	TBlockSlice []*TBlock
	// TBlockHook is the signature for custom TBlock hook methods
	TBlockHook func(context.Context, boil.ContextExecutor, *TBlock) error

	tBlockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tBlockType                 = reflect.TypeOf(&TBlock{})
	tBlockMapping              = queries.MakeStructMapping(tBlockType)
	tBlockPrimaryKeyMapping, _ = queries.BindMapping(tBlockType, tBlockMapping, tBlockPrimaryKeyColumns)
	tBlockInsertCacheMut       sync.RWMutex
	tBlockInsertCache          = make(map[string]insertCache)
	tBlockUpdateCacheMut       sync.RWMutex
	tBlockUpdateCache          = make(map[string]updateCache)
	tBlockUpsertCacheMut       sync.RWMutex
	tBlockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tBlockAfterSelectHooks []TBlockHook

var tBlockBeforeInsertHooks []TBlockHook
var tBlockAfterInsertHooks []TBlockHook

var tBlockBeforeUpdateHooks []TBlockHook
var tBlockAfterUpdateHooks []TBlockHook

var tBlockBeforeDeleteHooks []TBlockHook
var tBlockAfterDeleteHooks []TBlockHook

var tBlockBeforeUpsertHooks []TBlockHook
var tBlockAfterUpsertHooks []TBlockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TBlock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TBlock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TBlock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TBlock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TBlock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TBlock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TBlock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TBlock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TBlock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tBlockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTBlockHook registers your hook function for all future operations.
func AddTBlockHook(hookPoint boil.HookPoint, tBlockHook TBlockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tBlockAfterSelectHooks = append(tBlockAfterSelectHooks, tBlockHook)
	case boil.BeforeInsertHook:
		tBlockBeforeInsertHooks = append(tBlockBeforeInsertHooks, tBlockHook)
	case boil.AfterInsertHook:
		tBlockAfterInsertHooks = append(tBlockAfterInsertHooks, tBlockHook)
	case boil.BeforeUpdateHook:
		tBlockBeforeUpdateHooks = append(tBlockBeforeUpdateHooks, tBlockHook)
	case boil.AfterUpdateHook:
		tBlockAfterUpdateHooks = append(tBlockAfterUpdateHooks, tBlockHook)
	case boil.BeforeDeleteHook:
		tBlockBeforeDeleteHooks = append(tBlockBeforeDeleteHooks, tBlockHook)
	case boil.AfterDeleteHook:
		tBlockAfterDeleteHooks = append(tBlockAfterDeleteHooks, tBlockHook)
	case boil.BeforeUpsertHook:
		tBlockBeforeUpsertHooks = append(tBlockBeforeUpsertHooks, tBlockHook)
	case boil.AfterUpsertHook:
		tBlockAfterUpsertHooks = append(tBlockAfterUpsertHooks, tBlockHook)
	}
}

// OneG returns a single tBlock record from the query using the global executor.
func (q tBlockQuery) OneG(ctx context.Context) (*TBlock, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tBlock record from the query.
func (q tBlockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TBlock, error) {
	o := &TBlock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for t_block")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TBlock records from the query using the global executor.
func (q tBlockQuery) AllG(ctx context.Context) (TBlockSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TBlock records from the query.
func (q tBlockQuery) All(ctx context.Context, exec boil.ContextExecutor) (TBlockSlice, error) {
	var o []*TBlock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to TBlock slice")
	}

	if len(tBlockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TBlock records in the query using the global executor
func (q tBlockQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TBlock records in the query.
func (q tBlockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count t_block rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tBlockQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tBlockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if t_block exists")
	}

	return count > 0, nil
}

// BlockNumTTransactions retrieves all the t_transaction's TTransactions with an executor via block_num column.
func (o *TBlock) BlockNumTTransactions(mods ...qm.QueryMod) tTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"t_transaction\".\"block_num\"=?", o.BlockNum),
	)

	return TTransactions(queryMods...)
}

// LoadBlockNumTTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tBlockL) LoadBlockNumTTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTBlock interface{}, mods queries.Applicator) error {
	var slice []*TBlock
	var object *TBlock

	if singular {
		var ok bool
		object, ok = maybeTBlock.(*TBlock)
		if !ok {
			object = new(TBlock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTBlock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTBlock))
			}
		}
	} else {
		s, ok := maybeTBlock.(*[]*TBlock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTBlock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTBlock))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tBlockR{}
		}
		args = append(args, object.BlockNum)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tBlockR{}
			}

			for _, a := range args {
				if a == obj.BlockNum {
					continue Outer
				}
			}

			args = append(args, obj.BlockNum)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`t_transaction`),
		qm.WhereIn(`t_transaction.block_num in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load t_transaction")
	}

	var resultSlice []*TTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice t_transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on t_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_transaction")
	}

	if len(tTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlockNumTTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tTransactionR{}
			}
			foreign.R.BlockNumTBlock = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BlockNum == foreign.BlockNum {
				local.R.BlockNumTTransactions = append(local.R.BlockNumTTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &tTransactionR{}
				}
				foreign.R.BlockNumTBlock = local
				break
			}
		}
	}

	return nil
}

// AddBlockNumTTransactionsG adds the given related objects to the existing relationships
// of the t_block, optionally inserting them as new records.
// Appends related to o.R.BlockNumTTransactions.
// Sets related.R.BlockNumTBlock appropriately.
// Uses the global database handle.
func (o *TBlock) AddBlockNumTTransactionsG(ctx context.Context, insert bool, related ...*TTransaction) error {
	return o.AddBlockNumTTransactions(ctx, boil.GetContextDB(), insert, related...)
}

// AddBlockNumTTransactions adds the given related objects to the existing relationships
// of the t_block, optionally inserting them as new records.
// Appends related to o.R.BlockNumTTransactions.
// Sets related.R.BlockNumTBlock appropriately.
func (o *TBlock) AddBlockNumTTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlockNum = o.BlockNum
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"t_transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"block_num"}),
				strmangle.WhereClause("\"", "\"", 2, tTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.BlockNum, rel.TXHash}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlockNum = o.BlockNum
		}
	}

	if o.R == nil {
		o.R = &tBlockR{
			BlockNumTTransactions: related,
		}
	} else {
		o.R.BlockNumTTransactions = append(o.R.BlockNumTTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tTransactionR{
				BlockNumTBlock: o,
			}
		} else {
			rel.R.BlockNumTBlock = o
		}
	}
	return nil
}

// TBlocks retrieves all the records using an executor.
func TBlocks(mods ...qm.QueryMod) tBlockQuery {
	mods = append(mods, qm.From("\"t_block\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"t_block\".*"})
	}

	return tBlockQuery{q}
}

// FindTBlockG retrieves a single record by ID.
func FindTBlockG(ctx context.Context, blockNum int64, selectCols ...string) (*TBlock, error) {
	return FindTBlock(ctx, boil.GetContextDB(), blockNum, selectCols...)
}

// FindTBlock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTBlock(ctx context.Context, exec boil.ContextExecutor, blockNum int64, selectCols ...string) (*TBlock, error) {
	tBlockObj := &TBlock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"t_block\" where \"block_num\"=$1", sel,
	)

	q := queries.Raw(query, blockNum)

	err := q.Bind(ctx, exec, tBlockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from t_block")
	}

	if err = tBlockObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tBlockObj, err
	}

	return tBlockObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TBlock) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TBlock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_block provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBlockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tBlockInsertCacheMut.RLock()
	cache, cached := tBlockInsertCache[key]
	tBlockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tBlockAllColumns,
			tBlockColumnsWithDefault,
			tBlockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tBlockType, tBlockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tBlockType, tBlockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"t_block\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"t_block\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into t_block")
	}

	if !cached {
		tBlockInsertCacheMut.Lock()
		tBlockInsertCache[key] = cache
		tBlockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TBlock record using the global executor.
// See Update for more documentation.
func (o *TBlock) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TBlock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TBlock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tBlockUpdateCacheMut.RLock()
	cache, cached := tBlockUpdateCache[key]
	tBlockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tBlockAllColumns,
			tBlockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update t_block, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"t_block\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tBlockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tBlockType, tBlockMapping, append(wl, tBlockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update t_block row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for t_block")
	}

	if !cached {
		tBlockUpdateCacheMut.Lock()
		tBlockUpdateCache[key] = cache
		tBlockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tBlockQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tBlockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for t_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for t_block")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TBlockSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TBlockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"t_block\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tBlockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in tBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all tBlock")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TBlock) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TBlock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_block provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tBlockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tBlockUpsertCacheMut.RLock()
	cache, cached := tBlockUpsertCache[key]
	tBlockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tBlockAllColumns,
			tBlockColumnsWithDefault,
			tBlockColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tBlockAllColumns,
			tBlockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert t_block, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tBlockPrimaryKeyColumns))
			copy(conflict, tBlockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"t_block\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tBlockType, tBlockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tBlockType, tBlockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert t_block")
	}

	if !cached {
		tBlockUpsertCacheMut.Lock()
		tBlockUpsertCache[key] = cache
		tBlockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TBlock record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TBlock) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TBlock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TBlock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no TBlock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tBlockPrimaryKeyMapping)
	sql := "DELETE FROM \"t_block\" WHERE \"block_num\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from t_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for t_block")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tBlockQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tBlockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no tBlockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from t_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_block")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TBlockSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TBlockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tBlockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"t_block\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBlockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from tBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_block")
	}

	if len(tBlockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TBlock) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: no TBlock provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TBlock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTBlock(ctx, exec, o.BlockNum)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBlockSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: empty TBlockSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TBlockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TBlockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"t_block\".* FROM \"t_block\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tBlockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in TBlockSlice")
	}

	*o = slice

	return nil
}

// TBlockExistsG checks if the TBlock row exists.
func TBlockExistsG(ctx context.Context, blockNum int64) (bool, error) {
	return TBlockExists(ctx, boil.GetContextDB(), blockNum)
}

// TBlockExists checks if the TBlock row exists.
func TBlockExists(ctx context.Context, exec boil.ContextExecutor, blockNum int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"t_block\" where \"block_num\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, blockNum)
	}
	row := exec.QueryRowContext(ctx, sql, blockNum)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if t_block exists")
	}

	return exists, nil
}

// Exists checks if the TBlock row exists.
func (o *TBlock) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TBlockExists(ctx, exec, o.BlockNum)
}
