// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTBlocks(t *testing.T) {
	t.Parallel()

	query := TBlocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTBlocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TBlocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TBlockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTBlocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TBlockExists(ctx, tx, o.BlockNum)
	if err != nil {
		t.Errorf("Unable to check if TBlock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TBlockExists to return true, but got false.")
	}
}

func testTBlocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tBlockFound, err := FindTBlock(ctx, tx, o.BlockNum)
	if err != nil {
		t.Error(err)
	}

	if tBlockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTBlocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TBlocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTBlocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TBlocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTBlocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tBlockOne := &TBlock{}
	tBlockTwo := &TBlock{}
	if err = randomize.Struct(seed, tBlockOne, tBlockDBTypes, false, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, tBlockTwo, tBlockDBTypes, false, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTBlocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tBlockOne := &TBlock{}
	tBlockTwo := &TBlock{}
	if err = randomize.Struct(seed, tBlockOne, tBlockDBTypes, false, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, tBlockTwo, tBlockDBTypes, false, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tBlockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func tBlockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
	*o = TBlock{}
	return nil
}

func testTBlocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TBlock{}
	o := &TBlock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tBlockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TBlock object: %s", err)
	}

	AddTBlockHook(boil.BeforeInsertHook, tBlockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tBlockBeforeInsertHooks = []TBlockHook{}

	AddTBlockHook(boil.AfterInsertHook, tBlockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tBlockAfterInsertHooks = []TBlockHook{}

	AddTBlockHook(boil.AfterSelectHook, tBlockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tBlockAfterSelectHooks = []TBlockHook{}

	AddTBlockHook(boil.BeforeUpdateHook, tBlockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tBlockBeforeUpdateHooks = []TBlockHook{}

	AddTBlockHook(boil.AfterUpdateHook, tBlockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tBlockAfterUpdateHooks = []TBlockHook{}

	AddTBlockHook(boil.BeforeDeleteHook, tBlockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tBlockBeforeDeleteHooks = []TBlockHook{}

	AddTBlockHook(boil.AfterDeleteHook, tBlockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tBlockAfterDeleteHooks = []TBlockHook{}

	AddTBlockHook(boil.BeforeUpsertHook, tBlockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tBlockBeforeUpsertHooks = []TBlockHook{}

	AddTBlockHook(boil.AfterUpsertHook, tBlockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tBlockAfterUpsertHooks = []TBlockHook{}
}

func testTBlocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTBlocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tBlockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTBlockToManyBlockNumTTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TBlock
	var b, c TTransaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BlockNum = a.BlockNum
	c.BlockNum = a.BlockNum

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BlockNumTTransactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BlockNum == b.BlockNum {
			bFound = true
		}
		if v.BlockNum == c.BlockNum {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TBlockSlice{&a}
	if err = a.L.LoadBlockNumTTransactions(ctx, tx, false, (*[]*TBlock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlockNumTTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BlockNumTTransactions = nil
	if err = a.L.LoadBlockNumTTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlockNumTTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTBlockToManyAddOpBlockNumTTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TBlock
	var b, c, d, e TTransaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tBlockDBTypes, false, strmangle.SetComplement(tBlockPrimaryKeyColumns, tBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TTransaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tTransactionDBTypes, false, strmangle.SetComplement(tTransactionPrimaryKeyColumns, tTransactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TTransaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBlockNumTTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.BlockNum != first.BlockNum {
			t.Error("foreign key was wrong value", a.BlockNum, first.BlockNum)
		}
		if a.BlockNum != second.BlockNum {
			t.Error("foreign key was wrong value", a.BlockNum, second.BlockNum)
		}

		if first.R.BlockNumTBlock != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BlockNumTBlock != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BlockNumTTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BlockNumTTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BlockNumTTransactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTBlocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTBlocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TBlockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTBlocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tBlockDBTypes = map[string]string{`BlockNum`: `bigint`, `BlockHash`: `character varying`, `BlockTime`: `bigint`, `ParentHash`: `character varying`, `CreateTime`: `timestamp without time zone`, `UpdateTime`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testTBlocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tBlockAllColumns) == len(tBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTBlocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tBlockAllColumns) == len(tBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TBlock{}
	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tBlockDBTypes, true, tBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tBlockAllColumns, tBlockPrimaryKeyColumns) {
		fields = tBlockAllColumns
	} else {
		fields = strmangle.SetComplement(
			tBlockAllColumns,
			tBlockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TBlockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTBlocksUpsert(t *testing.T) {
	t.Parallel()

	if len(tBlockAllColumns) == len(tBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TBlock{}
	if err = randomize.Struct(seed, &o, tBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TBlock: %s", err)
	}

	count, err := TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tBlockDBTypes, false, tBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TBlock: %s", err)
	}

	count, err = TBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
