// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TTransaction is an object representing the database table.
type TTransaction struct {
	TXHash     string    `boil:"tx_hash" json:"tx_hash" toml:"tx_hash" yaml:"tx_hash"`
	BlockNum   int64     `boil:"block_num" json:"block_num" toml:"block_num" yaml:"block_num"`
	From       string    `boil:"from" json:"from" toml:"from" yaml:"from"`
	To         string    `boil:"to" json:"to" toml:"to" yaml:"to"`
	Nonce      int64     `boil:"nonce" json:"nonce" toml:"nonce" yaml:"nonce"`
	Data       string    `boil:"data" json:"data" toml:"data" yaml:"data"`
	Value      string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	CreateTime time.Time `boil:"create_time" json:"create_time" toml:"create_time" yaml:"create_time"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *tTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TTransactionColumns = struct {
	TXHash     string
	BlockNum   string
	From       string
	To         string
	Nonce      string
	Data       string
	Value      string
	CreateTime string
	UpdateTime string
}{
	TXHash:     "tx_hash",
	BlockNum:   "block_num",
	From:       "from",
	To:         "to",
	Nonce:      "nonce",
	Data:       "data",
	Value:      "value",
	CreateTime: "create_time",
	UpdateTime: "update_time",
}

var TTransactionTableColumns = struct {
	TXHash     string
	BlockNum   string
	From       string
	To         string
	Nonce      string
	Data       string
	Value      string
	CreateTime string
	UpdateTime string
}{
	TXHash:     "t_transaction.tx_hash",
	BlockNum:   "t_transaction.block_num",
	From:       "t_transaction.from",
	To:         "t_transaction.to",
	Nonce:      "t_transaction.nonce",
	Data:       "t_transaction.data",
	Value:      "t_transaction.value",
	CreateTime: "t_transaction.create_time",
	UpdateTime: "t_transaction.update_time",
}

// Generated where

var TTransactionWhere = struct {
	TXHash     whereHelperstring
	BlockNum   whereHelperint64
	From       whereHelperstring
	To         whereHelperstring
	Nonce      whereHelperint64
	Data       whereHelperstring
	Value      whereHelperstring
	CreateTime whereHelpertime_Time
	UpdateTime whereHelpertime_Time
}{
	TXHash:     whereHelperstring{field: "\"t_transaction\".\"tx_hash\""},
	BlockNum:   whereHelperint64{field: "\"t_transaction\".\"block_num\""},
	From:       whereHelperstring{field: "\"t_transaction\".\"from\""},
	To:         whereHelperstring{field: "\"t_transaction\".\"to\""},
	Nonce:      whereHelperint64{field: "\"t_transaction\".\"nonce\""},
	Data:       whereHelperstring{field: "\"t_transaction\".\"data\""},
	Value:      whereHelperstring{field: "\"t_transaction\".\"value\""},
	CreateTime: whereHelpertime_Time{field: "\"t_transaction\".\"create_time\""},
	UpdateTime: whereHelpertime_Time{field: "\"t_transaction\".\"update_time\""},
}

// TTransactionRels is where relationship names are stored.
var TTransactionRels = struct {
	BlockNumTBlock string
	TXHashTLogs    string
}{
	BlockNumTBlock: "BlockNumTBlock",
	TXHashTLogs:    "TXHashTLogs",
}

// tTransactionR is where relationships are stored.
type tTransactionR struct {
	BlockNumTBlock *TBlock   `boil:"BlockNumTBlock" json:"BlockNumTBlock" toml:"BlockNumTBlock" yaml:"BlockNumTBlock"`
	TXHashTLogs    TLogSlice `boil:"TXHashTLogs" json:"TXHashTLogs" toml:"TXHashTLogs" yaml:"TXHashTLogs"`
}

// NewStruct creates a new relationship struct
func (*tTransactionR) NewStruct() *tTransactionR {
	return &tTransactionR{}
}

func (r *tTransactionR) GetBlockNumTBlock() *TBlock {
	if r == nil {
		return nil
	}
	return r.BlockNumTBlock
}

func (r *tTransactionR) GetTXHashTLogs() TLogSlice {
	if r == nil {
		return nil
	}
	return r.TXHashTLogs
}

// tTransactionL is where Load methods for each relationship are stored.
type tTransactionL struct{}

var (
	tTransactionAllColumns            = []string{"tx_hash", "block_num", "from", "to", "nonce", "data", "value", "create_time", "update_time"}
	tTransactionColumnsWithoutDefault = []string{"tx_hash", "block_num", "from", "to", "nonce", "data", "value"}
	tTransactionColumnsWithDefault    = []string{"create_time", "update_time"}
	tTransactionPrimaryKeyColumns     = []string{"tx_hash"}
	tTransactionGeneratedColumns      = []string{}
)

type (
	// TTransactionSlice is an alias for a slice of pointers to TTransaction.
	// This should almost always be used instead of []TTransaction.
	TTransactionSlice []*TTransaction
	// TTransactionHook is the signature for custom TTransaction hook methods
	TTransactionHook func(context.Context, boil.ContextExecutor, *TTransaction) error

	tTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tTransactionType                 = reflect.TypeOf(&TTransaction{})
	tTransactionMapping              = queries.MakeStructMapping(tTransactionType)
	tTransactionPrimaryKeyMapping, _ = queries.BindMapping(tTransactionType, tTransactionMapping, tTransactionPrimaryKeyColumns)
	tTransactionInsertCacheMut       sync.RWMutex
	tTransactionInsertCache          = make(map[string]insertCache)
	tTransactionUpdateCacheMut       sync.RWMutex
	tTransactionUpdateCache          = make(map[string]updateCache)
	tTransactionUpsertCacheMut       sync.RWMutex
	tTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tTransactionAfterSelectHooks []TTransactionHook

var tTransactionBeforeInsertHooks []TTransactionHook
var tTransactionAfterInsertHooks []TTransactionHook

var tTransactionBeforeUpdateHooks []TTransactionHook
var tTransactionAfterUpdateHooks []TTransactionHook

var tTransactionBeforeDeleteHooks []TTransactionHook
var tTransactionAfterDeleteHooks []TTransactionHook

var tTransactionBeforeUpsertHooks []TTransactionHook
var tTransactionAfterUpsertHooks []TTransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TTransaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TTransaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TTransaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TTransaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TTransaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TTransaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TTransaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TTransaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TTransaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tTransactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTTransactionHook registers your hook function for all future operations.
func AddTTransactionHook(hookPoint boil.HookPoint, tTransactionHook TTransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tTransactionAfterSelectHooks = append(tTransactionAfterSelectHooks, tTransactionHook)
	case boil.BeforeInsertHook:
		tTransactionBeforeInsertHooks = append(tTransactionBeforeInsertHooks, tTransactionHook)
	case boil.AfterInsertHook:
		tTransactionAfterInsertHooks = append(tTransactionAfterInsertHooks, tTransactionHook)
	case boil.BeforeUpdateHook:
		tTransactionBeforeUpdateHooks = append(tTransactionBeforeUpdateHooks, tTransactionHook)
	case boil.AfterUpdateHook:
		tTransactionAfterUpdateHooks = append(tTransactionAfterUpdateHooks, tTransactionHook)
	case boil.BeforeDeleteHook:
		tTransactionBeforeDeleteHooks = append(tTransactionBeforeDeleteHooks, tTransactionHook)
	case boil.AfterDeleteHook:
		tTransactionAfterDeleteHooks = append(tTransactionAfterDeleteHooks, tTransactionHook)
	case boil.BeforeUpsertHook:
		tTransactionBeforeUpsertHooks = append(tTransactionBeforeUpsertHooks, tTransactionHook)
	case boil.AfterUpsertHook:
		tTransactionAfterUpsertHooks = append(tTransactionAfterUpsertHooks, tTransactionHook)
	}
}

// OneG returns a single tTransaction record from the query using the global executor.
func (q tTransactionQuery) OneG(ctx context.Context) (*TTransaction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tTransaction record from the query.
func (q tTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TTransaction, error) {
	o := &TTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: failed to execute a one query for t_transaction")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TTransaction records from the query using the global executor.
func (q tTransactionQuery) AllG(ctx context.Context) (TTransactionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TTransaction records from the query.
func (q tTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TTransactionSlice, error) {
	var o []*TTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repository: failed to assign all query results to TTransaction slice")
	}

	if len(tTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TTransaction records in the query using the global executor
func (q tTransactionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TTransaction records in the query.
func (q tTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to count t_transaction rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tTransactionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repository: failed to check if t_transaction exists")
	}

	return count > 0, nil
}

// BlockNumTBlock pointed to by the foreign key.
func (o *TTransaction) BlockNumTBlock(mods ...qm.QueryMod) tBlockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"block_num\" = ?", o.BlockNum),
	}

	queryMods = append(queryMods, mods...)

	return TBlocks(queryMods...)
}

// TXHashTLogs retrieves all the t_log's TLogs with an executor via tx_hash column.
func (o *TTransaction) TXHashTLogs(mods ...qm.QueryMod) tLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"t_log\".\"tx_hash\"=?", o.TXHash),
	)

	return TLogs(queryMods...)
}

// LoadBlockNumTBlock allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tTransactionL) LoadBlockNumTBlock(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTTransaction interface{}, mods queries.Applicator) error {
	var slice []*TTransaction
	var object *TTransaction

	if singular {
		var ok bool
		object, ok = maybeTTransaction.(*TTransaction)
		if !ok {
			object = new(TTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTTransaction))
			}
		}
	} else {
		s, ok := maybeTTransaction.(*[]*TTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTTransaction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tTransactionR{}
		}
		args = append(args, object.BlockNum)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tTransactionR{}
			}

			for _, a := range args {
				if a == obj.BlockNum {
					continue Outer
				}
			}

			args = append(args, obj.BlockNum)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`t_block`),
		qm.WhereIn(`t_block.block_num in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TBlock")
	}

	var resultSlice []*TBlock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TBlock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for t_block")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_block")
	}

	if len(tBlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlockNumTBlock = foreign
		if foreign.R == nil {
			foreign.R = &tBlockR{}
		}
		foreign.R.BlockNumTTransactions = append(foreign.R.BlockNumTTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlockNum == foreign.BlockNum {
				local.R.BlockNumTBlock = foreign
				if foreign.R == nil {
					foreign.R = &tBlockR{}
				}
				foreign.R.BlockNumTTransactions = append(foreign.R.BlockNumTTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTXHashTLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tTransactionL) LoadTXHashTLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTTransaction interface{}, mods queries.Applicator) error {
	var slice []*TTransaction
	var object *TTransaction

	if singular {
		var ok bool
		object, ok = maybeTTransaction.(*TTransaction)
		if !ok {
			object = new(TTransaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTTransaction))
			}
		}
	} else {
		s, ok := maybeTTransaction.(*[]*TTransaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTTransaction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tTransactionR{}
		}
		args = append(args, object.TXHash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tTransactionR{}
			}

			for _, a := range args {
				if a == obj.TXHash {
					continue Outer
				}
			}

			args = append(args, obj.TXHash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`t_log`),
		qm.WhereIn(`t_log.tx_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load t_log")
	}

	var resultSlice []*TLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice t_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on t_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for t_log")
	}

	if len(tLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TXHashTLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tLogR{}
			}
			foreign.R.TXHashTTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TXHash == foreign.TXHash {
				local.R.TXHashTLogs = append(local.R.TXHashTLogs, foreign)
				if foreign.R == nil {
					foreign.R = &tLogR{}
				}
				foreign.R.TXHashTTransaction = local
				break
			}
		}
	}

	return nil
}

// SetBlockNumTBlockG of the tTransaction to the related item.
// Sets o.R.BlockNumTBlock to related.
// Adds o to related.R.BlockNumTTransactions.
// Uses the global database handle.
func (o *TTransaction) SetBlockNumTBlockG(ctx context.Context, insert bool, related *TBlock) error {
	return o.SetBlockNumTBlock(ctx, boil.GetContextDB(), insert, related)
}

// SetBlockNumTBlock of the tTransaction to the related item.
// Sets o.R.BlockNumTBlock to related.
// Adds o to related.R.BlockNumTTransactions.
func (o *TTransaction) SetBlockNumTBlock(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TBlock) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"t_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"block_num"}),
		strmangle.WhereClause("\"", "\"", 2, tTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.BlockNum, o.TXHash}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlockNum = related.BlockNum
	if o.R == nil {
		o.R = &tTransactionR{
			BlockNumTBlock: related,
		}
	} else {
		o.R.BlockNumTBlock = related
	}

	if related.R == nil {
		related.R = &tBlockR{
			BlockNumTTransactions: TTransactionSlice{o},
		}
	} else {
		related.R.BlockNumTTransactions = append(related.R.BlockNumTTransactions, o)
	}

	return nil
}

// AddTXHashTLogsG adds the given related objects to the existing relationships
// of the t_transaction, optionally inserting them as new records.
// Appends related to o.R.TXHashTLogs.
// Sets related.R.TXHashTTransaction appropriately.
// Uses the global database handle.
func (o *TTransaction) AddTXHashTLogsG(ctx context.Context, insert bool, related ...*TLog) error {
	return o.AddTXHashTLogs(ctx, boil.GetContextDB(), insert, related...)
}

// AddTXHashTLogs adds the given related objects to the existing relationships
// of the t_transaction, optionally inserting them as new records.
// Appends related to o.R.TXHashTLogs.
// Sets related.R.TXHashTTransaction appropriately.
func (o *TTransaction) AddTXHashTLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TXHash = o.TXHash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"t_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tx_hash"}),
				strmangle.WhereClause("\"", "\"", 2, tLogPrimaryKeyColumns),
			)
			values := []interface{}{o.TXHash, rel.TXHash, rel.Index}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TXHash = o.TXHash
		}
	}

	if o.R == nil {
		o.R = &tTransactionR{
			TXHashTLogs: related,
		}
	} else {
		o.R.TXHashTLogs = append(o.R.TXHashTLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tLogR{
				TXHashTTransaction: o,
			}
		} else {
			rel.R.TXHashTTransaction = o
		}
	}
	return nil
}

// TTransactions retrieves all the records using an executor.
func TTransactions(mods ...qm.QueryMod) tTransactionQuery {
	mods = append(mods, qm.From("\"t_transaction\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"t_transaction\".*"})
	}

	return tTransactionQuery{q}
}

// FindTTransactionG retrieves a single record by ID.
func FindTTransactionG(ctx context.Context, tXHash string, selectCols ...string) (*TTransaction, error) {
	return FindTTransaction(ctx, boil.GetContextDB(), tXHash, selectCols...)
}

// FindTTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTTransaction(ctx context.Context, exec boil.ContextExecutor, tXHash string, selectCols ...string) (*TTransaction, error) {
	tTransactionObj := &TTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"t_transaction\" where \"tx_hash\"=$1", sel,
	)

	q := queries.Raw(query, tXHash)

	err := q.Bind(ctx, exec, tTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repository: unable to select from t_transaction")
	}

	if err = tTransactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tTransactionObj, err
	}

	return tTransactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TTransaction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_transaction provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tTransactionInsertCacheMut.RLock()
	cache, cached := tTransactionInsertCache[key]
	tTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tTransactionAllColumns,
			tTransactionColumnsWithDefault,
			tTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tTransactionType, tTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tTransactionType, tTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"t_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"t_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repository: unable to insert into t_transaction")
	}

	if !cached {
		tTransactionInsertCacheMut.Lock()
		tTransactionInsertCache[key] = cache
		tTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TTransaction record using the global executor.
// See Update for more documentation.
func (o *TTransaction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tTransactionUpdateCacheMut.RLock()
	cache, cached := tTransactionUpdateCache[key]
	tTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tTransactionAllColumns,
			tTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repository: unable to update t_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"t_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tTransactionType, tTransactionMapping, append(wl, tTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update t_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by update for t_transaction")
	}

	if !cached {
		tTransactionUpdateCacheMut.Lock()
		tTransactionUpdateCache[key] = cache
		tTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tTransactionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all for t_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected for t_transaction")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TTransactionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repository: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"t_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to update all in tTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to retrieve rows affected all in update all tTransaction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TTransaction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repository: no t_transaction provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tTransactionUpsertCacheMut.RLock()
	cache, cached := tTransactionUpsertCache[key]
	tTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tTransactionAllColumns,
			tTransactionColumnsWithDefault,
			tTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tTransactionAllColumns,
			tTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repository: unable to upsert t_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tTransactionPrimaryKeyColumns))
			copy(conflict, tTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"t_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tTransactionType, tTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tTransactionType, tTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repository: unable to upsert t_transaction")
	}

	if !cached {
		tTransactionUpsertCacheMut.Lock()
		tTransactionUpsertCache[key] = cache
		tTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TTransaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TTransaction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repository: no TTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"t_transaction\" WHERE \"tx_hash\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete from t_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by delete for t_transaction")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tTransactionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repository: no tTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from t_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_transaction")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TTransactionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"t_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repository: unable to delete all from tTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repository: failed to get rows affected by deleteall for t_transaction")
	}

	if len(tTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TTransaction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: no TTransaction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTTransaction(ctx, exec, o.TXHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTransactionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("repository: empty TTransactionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"t_transaction\".* FROM \"t_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repository: unable to reload all in TTransactionSlice")
	}

	*o = slice

	return nil
}

// TTransactionExistsG checks if the TTransaction row exists.
func TTransactionExistsG(ctx context.Context, tXHash string) (bool, error) {
	return TTransactionExists(ctx, boil.GetContextDB(), tXHash)
}

// TTransactionExists checks if the TTransaction row exists.
func TTransactionExists(ctx context.Context, exec boil.ContextExecutor, tXHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"t_transaction\" where \"tx_hash\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tXHash)
	}
	row := exec.QueryRowContext(ctx, sql, tXHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repository: unable to check if t_transaction exists")
	}

	return exists, nil
}

// Exists checks if the TTransaction row exists.
func (o *TTransaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TTransactionExists(ctx, exec, o.TXHash)
}
