// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTTransactions(t *testing.T) {
	t.Parallel()

	query := TTransactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTTransactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTransactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TTransactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTransactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTransactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTTransactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TTransactionExists(ctx, tx, o.TXHash)
	if err != nil {
		t.Errorf("Unable to check if TTransaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TTransactionExists to return true, but got false.")
	}
}

func testTTransactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tTransactionFound, err := FindTTransaction(ctx, tx, o.TXHash)
	if err != nil {
		t.Error(err)
	}

	if tTransactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTTransactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TTransactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTTransactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TTransactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTTransactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tTransactionOne := &TTransaction{}
	tTransactionTwo := &TTransaction{}
	if err = randomize.Struct(seed, tTransactionOne, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, tTransactionTwo, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTTransactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tTransactionOne := &TTransaction{}
	tTransactionTwo := &TTransaction{}
	if err = randomize.Struct(seed, tTransactionOne, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, tTransactionTwo, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tTransactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func tTransactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TTransaction) error {
	*o = TTransaction{}
	return nil
}

func testTTransactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TTransaction{}
	o := &TTransaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tTransactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TTransaction object: %s", err)
	}

	AddTTransactionHook(boil.BeforeInsertHook, tTransactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tTransactionBeforeInsertHooks = []TTransactionHook{}

	AddTTransactionHook(boil.AfterInsertHook, tTransactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tTransactionAfterInsertHooks = []TTransactionHook{}

	AddTTransactionHook(boil.AfterSelectHook, tTransactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tTransactionAfterSelectHooks = []TTransactionHook{}

	AddTTransactionHook(boil.BeforeUpdateHook, tTransactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tTransactionBeforeUpdateHooks = []TTransactionHook{}

	AddTTransactionHook(boil.AfterUpdateHook, tTransactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tTransactionAfterUpdateHooks = []TTransactionHook{}

	AddTTransactionHook(boil.BeforeDeleteHook, tTransactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tTransactionBeforeDeleteHooks = []TTransactionHook{}

	AddTTransactionHook(boil.AfterDeleteHook, tTransactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tTransactionAfterDeleteHooks = []TTransactionHook{}

	AddTTransactionHook(boil.BeforeUpsertHook, tTransactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tTransactionBeforeUpsertHooks = []TTransactionHook{}

	AddTTransactionHook(boil.AfterUpsertHook, tTransactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tTransactionAfterUpsertHooks = []TTransactionHook{}
}

func testTTransactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTransactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tTransactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTTransactionToManyTXHashTLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TTransaction
	var b, c TLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tLogDBTypes, false, tLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tLogDBTypes, false, tLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TXHash = a.TXHash
	c.TXHash = a.TXHash

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TXHashTLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TXHash == b.TXHash {
			bFound = true
		}
		if v.TXHash == c.TXHash {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TTransactionSlice{&a}
	if err = a.L.LoadTXHashTLogs(ctx, tx, false, (*[]*TTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TXHashTLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TXHashTLogs = nil
	if err = a.L.LoadTXHashTLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TXHashTLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTTransactionToManyAddOpTXHashTLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TTransaction
	var b, c, d, e TLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tTransactionDBTypes, false, strmangle.SetComplement(tTransactionPrimaryKeyColumns, tTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tLogDBTypes, false, strmangle.SetComplement(tLogPrimaryKeyColumns, tLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTXHashTLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TXHash != first.TXHash {
			t.Error("foreign key was wrong value", a.TXHash, first.TXHash)
		}
		if a.TXHash != second.TXHash {
			t.Error("foreign key was wrong value", a.TXHash, second.TXHash)
		}

		if first.R.TXHashTTransaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TXHashTTransaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TXHashTLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TXHashTLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TXHashTLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTTransactionToOneTBlockUsingBlockNumTBlock(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TTransaction
	var foreign TBlock

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tTransactionDBTypes, false, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tBlockDBTypes, false, tBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TBlock struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BlockNum = foreign.BlockNum
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BlockNumTBlock().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.BlockNum != foreign.BlockNum {
		t.Errorf("want: %v, got %v", foreign.BlockNum, check.BlockNum)
	}

	ranAfterSelectHook := false
	AddTBlockHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *TBlock) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TTransactionSlice{&local}
	if err = local.L.LoadBlockNumTBlock(ctx, tx, false, (*[]*TTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BlockNumTBlock == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BlockNumTBlock = nil
	if err = local.L.LoadBlockNumTBlock(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BlockNumTBlock == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTTransactionToOneSetOpTBlockUsingBlockNumTBlock(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TTransaction
	var b, c TBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tTransactionDBTypes, false, strmangle.SetComplement(tTransactionPrimaryKeyColumns, tTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tBlockDBTypes, false, strmangle.SetComplement(tBlockPrimaryKeyColumns, tBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tBlockDBTypes, false, strmangle.SetComplement(tBlockPrimaryKeyColumns, tBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TBlock{&b, &c} {
		err = a.SetBlockNumTBlock(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BlockNumTBlock != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BlockNumTTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BlockNum != x.BlockNum {
			t.Error("foreign key was wrong value", a.BlockNum)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BlockNum))
		reflect.Indirect(reflect.ValueOf(&a.BlockNum)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BlockNum != x.BlockNum {
			t.Error("foreign key was wrong value", a.BlockNum, x.BlockNum)
		}
	}
}

func testTTransactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTransactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TTransactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTTransactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tTransactionDBTypes = map[string]string{`TXHash`: `character varying`, `BlockNum`: `bigint`, `From`: `character varying`, `To`: `character varying`, `Nonce`: `bigint`, `Data`: `character varying`, `Value`: `character varying`, `CreateTime`: `timestamp without time zone`, `UpdateTime`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testTTransactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tTransactionAllColumns) == len(tTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTTransactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tTransactionAllColumns) == len(tTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TTransaction{}
	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tTransactionDBTypes, true, tTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tTransactionAllColumns, tTransactionPrimaryKeyColumns) {
		fields = tTransactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			tTransactionAllColumns,
			tTransactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TTransactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTTransactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(tTransactionAllColumns) == len(tTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TTransaction{}
	if err = randomize.Struct(seed, &o, tTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TTransaction: %s", err)
	}

	count, err := TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tTransactionDBTypes, false, tTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TTransaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TTransaction: %s", err)
	}

	count, err = TTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
